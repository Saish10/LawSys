services:
  # PostgreSQL service
  database:
    container_name: LS_DB
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"  # Expose port 5432 for PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist DB data
    env_file: .env
    # networks:
    #   - lawsys-network


  # Django backend service
  # backend:
  #   container_name: ls_backend
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command: ./start.sh  # Run the custom start.sh script
  #   volumes:
  #     - .:/app  # Mount the current directory to /app in the container
  #   ports:
  #     - "8000:8000"  # Expose port 8000 for Django (Uvicorn)
  #   depends_on:
  #     - database
  #     - redis  # Ensure Redis and Database are up before Django
  #   env_file:
  #     - .env  # Load environment variables from .env file
  #   environment:
  #     DJANGO_SETTINGS_MODULE: "law_sys.configurations.settings"
  #   networks:
  #     - lawsys-network

  # # Redis service for Django Channels and Celery
  # redis:
  #   container_name: ls_redis
  #   image: redis:latest
  #   restart: always
  #   ports:
  #     - "6379:6379"  # Expose port 6379 for Redis
  #   networks:
  #     - lawsys-network

  # Celery Flower (Optional: For monitoring Celery workers)
  # celery-flower:
  #   container_name: celery_flower
  #   image: mher/flower:latest
  #   command: ["flower", "--broker=redis://ls_redis:6379/0"]
  #   ports:
  #     - "5555:5555"  # Flower UI exposed on port 5555
  #   networks:
  #     - lawsys-network
  #   depends_on:
  #     - redis
  #     - backend

# Custom network for all services to communicate
# networks:
#   lawsys-network:
#     external: true  # Use external network (ensure it exists)

# Persistent volume for PostgreSQL data
volumes:
  postgres_data:
